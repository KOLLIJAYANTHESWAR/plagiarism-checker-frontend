
CODE PLAGIARISM ANALYSIS REPORT
===============================
Generated on: 9/6/2025, 10:43:32 AM
Report ID: G2XLBK7E4
Analysis Type: Code Similarity Detection

================================================================================
EXECUTIVE SUMMARY
================================================================================

Final Plagiarism Score: 46.1%
Semantic Similarity: 70.79%
Lexical Similarity: 1.29%
Structural Similarity: 58%
Status: Original

Status: 🚨 FLAGGED - High similarity detected

VISUAL SCORE BREAKDOWN:
┌─────────────────────────┬──────────┬─────────────────────────────────────────┐
│ Analysis Type           │ Score    │ Visual Bar                              │
├─────────────────────────┼──────────┼─────────────────────────────────────────┤
│ Semantic Similarity     │ 70.79    │ ████████████████████████████░░░░░░░░░░░░ │
│ Lexical Similarity      │ 1.29     │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ │
│ Structural Similarity   │ 58       │ ███████████████████████░░░░░░░░░░░░░░░░░ │
│ Final Plagiarism Score  │ 46.1     │ ██████████████████░░░░░░░░░░░░░░░░░░░░░░ │
└─────────────────────────┴──────────┴─────────────────────────────────────────┘

================================================================================
VISUAL ANALYSIS CHARTS
================================================================================

PIE CHART DISTRIBUTION:
┌─────────────────────────────────────────────────────────────────────────────┐
│                          PLAGIARISM DISTRIBUTION                            │
│                                                                             │
│                    Plagiarized: 46.1%  │  Unique: 53.9%                    │
│                                                                             │
│    ░░░░░░░░░░░░░░░░░░░░  │  ████████████████████    │
│    ░░░░░░░░░░░░░░░░░░░░  │  ████████████████████    │
│                                                                             │
│    🔴 Plagiarized Content                    🟢 Unique Content              │
└─────────────────────────────────────────────────────────────────────────────┘

================================================================================
WHY THIS CODE GOT 46.1% PLAGIARISM RATE
================================================================================

1. Moderate semantic similarity shows similar concepts and ideas

2. Low lexical similarity indicates different word choices and expressions

3. Moderate structural similarity indicates similar code/text organization approaches

4. Code demonstrates different implementation strategies

================================================================================
CODE COMPARISON ANALYSIS
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                          SIDE-BY-SIDE COMPARISON                            │
└─────────────────────────────────────────────────────────────────────────────┘

ORIGINAL CODE (SOURCE):
────────────────────────────────────────────────────────────────────────────────
class Poller:
    def add(self, fd, read_mode=True, write_mode=True):
        if self.poller:
            poll_events = 0

            if read_mode:
                poll_events |= select.POLLIN
            if write_mode:
                poll_events |= select.POLLOUT

            self.poller.register(fd, poll_events | select.POLLHUP | select.POLLERR)

SUBMITTED CODE (TARGET):
────────────────────────────────────────────────────────────────────────────────
def add(self, fd, for_read=False, for_write=False):
      if self.pollobj:
         mask = 0
         if for_read:
            mask |= select.POLLIN
         if for_write:
            mask |= select.POLLOUT

         self.pollobj.register(fd, mask|select.POLLHUP|select.POLLERR) 

      else:
         #print >>sys.stderr, "POLL add", fd, for_read, for_write
         if for_read:
            self.reads.add(fd) 
            self.kqueue.control([select.kevent(fd, select.KQ_FILTER_READ, select.KQ_EV_ADD, fflags=select.KQ_NOTE_LOWAT)], 0)
         if for_write:
            self.writes.add(fd) 
            self.kqueue.control([select.kevent(fd, select.KQ_FILTER_WRITE, select.KQ_EV_ADD)], 0)

   def unregister(self, fd):
      if self.pollobj:
         self.pollobj.unregister(fd)
      else:
         #print >>sys.stderr, "POLL unregister", fd, fd in self.reads
         if fd in self.reads:
            self.kqueue.control([select.kevent(fd, select.KQ_FILTER_READ, select.KQ_EV_DELETE)], 0)
            self.reads.remove(fd)

         if fd in self.writes:
            self.kqueue.control([select.kevent(fd, select.KQ_FILTER_WRITE, select.KQ_EV_DELETE)], 0)
            self.writes.remove(fd)

   def poll(self, timeout):
      if self.pollobj:
         try:
            l = self.pollobj.poll(timeout)
         except select.error as e:
            if e[0] == errno.EINTR:
               return
            else:
               raise

         for fd,event in l:
            if event & select.POLLIN:
               yield (fd, 'r')
            if event & select.POLLOUT:
               yield (fd, 'w')

      else:
         #print >>sys.stderr, "POLL poll", timeout
         if not self.reads and not self.writes:
            #print >>sys.stderr, "Skipping poll with nothing registered"
            return

         if timeout == -1:
            timeout = None
      
         events = self.kqueue.control(None, 1, timeout)
         for e in events:
            if e.filter == select.KQ_FILTER_RE

[Content truncated - Full content available in web interface]

================================================================================
TECHNICAL ANALYSIS & RECOMMENDATIONS
================================================================================

DETECTION METHODOLOGY:
┌─────────────────────────────────────────────────────────────────────────────┐
│ • Semantic Analysis: Understands meaning and logic behind the code        │
│ • Lexical Analysis: Compares syntax patterns, variable names, and structure │
│ • Similarity Highlighting: Marks matching sections for identification      │
│ • Final Score: Weighted combination of all analysis methods                │
└─────────────────────────────────────────────────────────────────────────────┘

PROFESSIONAL RECOMMENDATIONS:
┌─────────────────────────────────────────────────────────────────────────────┐
│ ⚠️  WARNING: Moderate similarities found - consider revision        │
└─────────────────────────────────────────────────────────────────────────────┘

End of Report
================================================================================
    